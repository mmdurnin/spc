const express = require("express");
const bodyParser = require("body-parser");
// const mongoose = require('mongoose');
const nodemailer = require("nodemailer");
const path = require('path');
const cors = require("cors");
const jwt = require("jsonwebtoken");
const router = express.Router();

if (process.env.NODE_ENV !== "production") {
  require("dotenv").config();
}

// config/ middleware
const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());
app.use(cors());

app.use(express.static(path.join(__dirname, 'build'))); // tell express where to look for static files generated by webpack (in build mode)
app.get('/', function (req, res) {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

// auth
app.post("/api/login", (req, res) => {
  let { username, password } = req.body;

  if (username === process.env.USERNAME && password === process.env.PASSWORD) {
    const accessToken = jwt.sign({ username: username }, process.env.SECRET);
    process.env.ACCESSTOKEN = accessToken;
    res.json({ accessToken });
  } else {
    console.log("invalid credentials")
    res.status(401).send({
      message: "Invalid Credentials"
    })
  }
});

app.use("/api/admin", function (req, res, next) {
  console.log("middleware is verifying token")
  const token = req.get("token");
  console.log("ENV TOKEN")
  console.log(process.env.ACCESSTOKEN)
  console.log("token")
  console.log(token)
  if (token !== process.env.ACCESSTOKEN || !token || !process.env.ACCESSTOKEN) {
    res.status(401).send({ message: "Not Authorized" });
  } else {
    console.log("authorized");
    next();
  }
});

// database 
const admin = require("firebase-admin");
const serviceAccount = require("./event_db.json");

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://events-f9e2b.firebaseio.com",
});

const db = admin.database();


app.get("/api/events", function(req, res) {
  const ref = db.ref("/events");
  ref.once("value", function(snapshot) {
    const data = snapshot.val();
    res.send(data)
  })
})

app.post("/api/admin/events", function(req, res) {
  console.log("requesting an add to db")
  const ref = db.ref(`/events/${req.body.eventId}`)
  ref.set(req.body.eventData, function(error) {
    if (error) {
      res.status(418).send({ message: "Unable to create event" })
    } else {
      console.log("success!!!")
      res.status(200).send({ message: "Successfully added to events db"})
    }
  })
})

app.delete("/api/admin/events", function(req, res) {
  const ref = db.ref("/events")
  ref.child(req.body.id).remove()
    .then(() => res.status(200).send({ message: "successfully removed" }))
    .catch((err) => res.status(418).send({ message: err }))
})

app.get("/api/admin/mailing_list", function(req, res) {
  const ref = db.ref("/mailing_list");
  ref.once("value", function (snapshot) {
    const data = snapshot.val();
    res.send(data);
  });
})

app.post("/api/email", function(req, res) {
  const ref = db.ref(`/mailing_list/${req.body.mailing_id}`);
  ref.set(req.body.emailRecord, function(error) {
    if (error) {
      res.status(418).send({ message: "Unable to add email to mailing list" })
    } else {
      res.status(200).send({ message: "Successfully added to mailing list" })
    }
  })
})

app.delete("/api/admin/email", function(req, res) {
  const ref = db.ref("/mailing_list");
  ref.child(req.body.id).remove()
    .then(() => res.status(200).send({ message: "successfully removed from mailing list" }))
    .catch((err) => res.status(418).send({ message: err }))
})

// email
app.use("/", router);

const transport = {
  host: "smtp.gmail.com", 
  port: 587,
  auth: {
    user: process.env.EMAIL,
    pass: process.env.EMAILPASSWORD
  }
};

const transporter = nodemailer.createTransport(transport);

transporter.verify((error, success) => {
  if (error) {
    console.log(error);
  } else {
    console.log("Server is ready to take messages");
  }
});

router.post("/send", (req, res, next) => {
  const topic = req.body.topic;
  const firstName = req.body.firstName;
  const lastName = req.body.lastName;
  const name = `${firstName} ${lastName}`
  const email = req.body.email;
  const message = req.body.message;
  const subject = `New Message from Contact Form: ${topic}`
  const content = `name: ${name} \n email: ${email} \n message: ${message} `;

  const mail = {
    from: name,
    to: "styleprozcrew.allday@gmail.com", // Change to email address that you want to receive messages on
    subject: subject,
    text: content
  };

  transporter.sendMail(mail, (err, data) => {
    if (err) {
      res.json({
        status: "fail"
      });
    } else {
      res.json({
        status: "success"
      });
    }
  });
});


const port = process.env.PORT || 3002;
app.listen(port, () => console.log(`Server is running on port ${port}`));

// const server = app.listen((8081, function () {
//   const port = server.address().port;
//   console.log(`Server started at ${port}`);
// }));